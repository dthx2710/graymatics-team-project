generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()"))
  username      String    @unique(map: "User_name_key") @default(dbgenerated("uuid_generate_v4()"))
  email         String?   @unique
  emailVerified DateTime?
  access_level  String?   @db.VarChar
  active        Boolean   @default(true)
  address       String?
  company       String?
  gender        String?
  group         String?
  phone         String?   @db.VarChar
  role          String?
  country       String?
  description   String?
  password      String    @default("")
  image         String?
  logo          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          BigInt    @id @default(autoincrement())
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  url         String?
  location    String?
  type        String?
  name        String?
  thumbnail   String?
  description String?
  video_uuid  String?
}

model Analytics {
  id                 BigInt    @id @default(autoincrement())
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  assigned_analytics String?
  cam_id             String?
}

model Camera {
  cam_name     String?
  cam_location String?
  rstp_link    String?
  is_assigned  Boolean?
  user_id      String
  analytics    String?
  cam_id       BigInt   @id @default(autoincrement())
  other_id     String?
  src          String?
}

model DetectedAnalytics {
  id          BigInt    @id @default(autoincrement())
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  content     String?
  detected_at DateTime? @db.Timestamptz(6)
}

model ChartData {
  id         BigInt  @id @default(autoincrement())
  chartType  String?
  objectData Json?   @db.Json
}

model Incident {
  id        BigInt    @id
  type      String?
  date      DateTime? @db.Date
  time      DateTime? @db.Time(6)
  camera    String?   @db.VarChar
  severity  String?
  photo_url String?
  category  String?
}

model Heatmap {
  id                    BigInt    @id
  mall_section          String?
  customer_count        BigInt?
  time                  DateTime? @db.Time(6)
  loitering_probability Float?
  violence_probability  Float?
  suspicion_probability Float?
}

model Tickets {
  id            BigInt    @id @default(autoincrement())
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  occurance     String?
  status        String?
  type_of_alert String?
  assigned_to   String?
  assigned_by   String?
  severity      String?
  reviewed      String?
}
